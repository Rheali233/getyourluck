import React from 'react';
import { Card, FeedbackFloatingWidget } from '@/components/ui';
import { cn } from '@/utils/classNames';
import type { BaseComponentProps } from '@/types/componentTypes';
import type { TestResult } from '@/modules/testing/types/TestTypes';

export interface VARKResultDisplayProps extends BaseComponentProps {
  result: TestResult;
  onReset: () => void;
  onShare?: () => void;
}

export const VARKResultDisplay: React.FC<VARKResultDisplayProps> = ({
  className,
  testId = 'vark-result-display',
  result,
  onReset,
  onShare
}) => {
  // Extract data from TestResult format
  let primaryStyle = (result as any).primaryStyle || (result as any).dominantStyle || result.data?.dominantStyle || 'Unknown';
  let secondaryStyle = (result as any).secondaryStyle || result.data?.secondaryStyle || '';
  const rootScores: Record<string, number> = (result as any).scores || (result as any).allScores || result.data?.allScores || {};
  const analysis = (result as any).analysis || result.data?.analysis || '';
  const meta = (result as any).metadata || result.data?.metadata || {};
  const recommendations = (result as any).recommendations || result.data?.recommendations || [];
  const studyTips = (result as any).studyTips || result.data?.studyTips || [];
  
  // Êñ∞Â¢û‰∏ì‰∏öËß£ËØªÂ≠óÊÆµ
  const cognitiveProfile = (result as any).cognitiveProfile || result.data?.cognitiveProfile || {};
  const learningPreferences = (result as any).learningPreferences || result.data?.learningPreferences || {};
  const contextualInsights = (result as any).contextualInsights || result.data?.contextualInsights || {};
  const adaptiveStrategies = (result as any).adaptiveStrategies || result.data?.adaptiveStrategies || {};

  const getStyleIcon = (style: string) => {
    switch (style) {
      case 'Visual': return 'üëÅÔ∏è';
      case 'Auditory': return 'üëÇ';
      case 'Read/Write': return 'üìñ';
      case 'Kinesthetic': return '‚úã';
      case 'Multimodal': return 'üîÑ';
      default: return 'üéì';
    }
  };

  // Â§ÑÁêÜÈ£éÊ†ºÊï∞ÊçÆÔºåÁ°Æ‰øùÊúâÁôæÂàÜÊØîÂíåÁ≠âÁ∫ß
  const rawStyles = [
    { name: 'Visual', score: rootScores['V'] || rootScores['Visual'] || 0 },
    { name: 'Auditory', score: rootScores['A'] || rootScores['Auditory'] || 0 },
    { name: 'Read/Write', score: rootScores['R'] || rootScores['Reading'] || 0 },
    { name: 'Kinesthetic', score: rootScores['K'] || rootScores['Kinesthetic'] || 0 },
  ];
  
  // Âä®ÊÄÅÂàÜÊØçÔºö‰ΩøÁî® metadata.totalQuestions Êé®Êñ≠ÊØèÁª¥È¢òÊï∞ÔºõÊØèÈ¢òÊª°ÂàÜ4ÂàÜ
  const questionsPerDimension = Math.max(1, Math.round(((meta as any).totalQuestions || 16) / 4));
  const maxPerDimension = questionsPerDimension * 4;
  const styles = rawStyles
    .map(s => ({ ...s, percent: Math.max(0, Math.min(100, Math.round((s.score / maxPerDimension) * 100))) }))
    .sort((a, b) => b.percent - a.percent);

  // Â¶ÇÊûúAIÊ≤°ÊúâÊèê‰æõprimary/secondaryÔºå‰ªéÊéíÂ∫èÁªìÊûúÊé®Êñ≠
  if (primaryStyle === 'Unknown' && styles.length > 0) {
    const top = styles[0];
    if (top && top.percent > 0) primaryStyle = top.name as any;
  }
  if (!secondaryStyle && styles.length > 1) {
    const second = styles[1];
    if (second && second.percent > 0) secondaryStyle = second.name as any;
  }

  // Learning preference strength labels
  const levelOf = (p: number) => (
    p >= 80 ? 'Very strong preference' :
    p >= 60 ? 'Strong preference' :
    p >= 40 ? 'Moderate preference' :
    'Weak preference'
  );

  // ÈôêÂà∂ÊèèËø∞ÈïøÂ∫¶Ôºà100‰∏™ÂçïËØç‰ª•ÂÜÖÔºâ
  const limitWords = (text: any, maxWords = 100): string => {
    if (!text) return '';
    const s = String(text).trim();
    if (!s) return '';
    const words = s.split(/\s+/);
    if (words.length <= maxWords) return s;
    return words.slice(0, maxWords).join(' ') + '‚Ä¶';
  };

  // ‰∏ì‰∏öÁßëÂ≠¶ÊèèËø∞ - Ê†πÊçÆËØÑÂàÜÁªìÊûúÊèèËø∞ÁâπÂæÅÂíåÂÄæÂêë
  const getProfessionalDescription = (name: string, percent: number): string => {
    const level = levelOf(percent);
    const intensity = level.includes('Very strong') ? 'highly' : level.includes('Strong') ? 'moderately' : level.includes('Moderate') ? 'somewhat' : 'minimally';
    
    switch (name) {
      case 'Visual':
        return `Shows ${intensity} visual learning tendencies with ${level.includes('Weak') ? 'limited' : level.includes('Moderate') ? 'balanced' : 'strong'} preference for diagrams, charts, and spatial information processing.`;
      case 'Auditory':
        return `Exhibits ${intensity} auditory learning patterns with ${level.includes('Weak') ? 'preference for' : level.includes('Moderate') ? 'balanced approach to' : 'strong inclination toward'} listening-based information processing.`;
      case 'Read/Write':
        return `Demonstrates ${intensity} reading/writing orientation with ${level.includes('Weak') ? 'limited' : level.includes('Moderate') ? 'moderate' : 'strong'} preference for text-based learning materials.`;
      case 'Kinesthetic':
        return `Shows ${intensity} kinesthetic learning approach with ${level.includes('Weak') ? 'minimal' : level.includes('Moderate') ? 'moderate' : 'strong'} emphasis on hands-on and experiential learning.`;
      default:
        return `Shows ${intensity} characteristics in this learning style dimension.`;
    }
  };

  // Ëé∑ÂèñËøõÂ∫¶Êù°È¢úËâ≤
  const getProgressColor = (percent: number) => {
    if (percent >= 80) return 'from-cyan-500 to-cyan-600';
    if (percent >= 60) return 'from-sky-500 to-sky-600';
    if (percent >= 40) return 'from-blue-500 to-blue-600';
    return 'from-gray-400 to-gray-500';
  };

  return (
    <div className={cn('min-h-screen py-8 px-4', className)} data-testid={testId}>
      <div className="max-w-5xl mx-auto space-y-8">
        {/* È°∂ÈÉ®‰∏ªÂç°Áâá - Âü∫‰∫éLove StyleËÆæËÆ° */}
        <Card className="p-8 bg-gradient-to-br from-cyan-50 to-sky-50 border-2 border-cyan-200">
          <div className="flex items-start space-x-6">
            <div className="flex-shrink-0">
              <div className="w-20 h-20 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-2xl flex items-center justify-center text-4xl">
                {getStyleIcon(primaryStyle)}
              </div>
            </div>
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-sky-900 mb-2">
                {primaryStyle} Learning Style
              </h1>
              <p className="text-lg text-sky-700 mb-4">
                {secondaryStyle && secondaryStyle !== primaryStyle && (
                  <span>with {secondaryStyle} tendencies</span>
                )}
              </p>
              <p className="text-sky-600 leading-relaxed">
                {limitWords(analysis) || `Your learning style analysis reveals a ${levelOf(styles[0]?.percent || 0).toLowerCase()} for ${primaryStyle.toLowerCase()} learning approaches.`}
              </p>
            </div>
          </div>
        </Card>

        {/* Áª¥Â∫¶ÂàÜÊûêÂç°Áâá - ÁΩëÊ†ºÂ∏ÉÂ±Ä */}
        <Card className="p-8">
          <h2 className="text-2xl font-bold text-sky-900 mb-6 text-center">Learning Style Dimensions</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {styles.map((style) => (
              <div key={style.name} className="bg-white rounded-xl p-6 border border-sky-100 hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{getStyleIcon(style.name)}</span>
                    <div>
                      <h3 className="text-lg font-semibold text-sky-900">{style.name}</h3>
                      <p className="text-sm text-sky-600">{levelOf(style.percent)}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-bold text-sky-900">{style.percent}%</div>
                    <div className="text-sm text-sky-600">{style.score} points</div>
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3 mb-3">
                  <div 
                    className={cn('h-3 rounded-full bg-gradient-to-r transition-all duration-500', getProgressColor(style.percent))}
                    style={{ width: `${style.percent}%` }}
                  />
                </div>
                <p className="text-sm text-sky-700 leading-relaxed">
                  {getProfessionalDescription(style.name, style.percent)}
                </p>
              </div>
            ))}
          </div>
        </Card>

        {/* ‰∏ì‰∏öÂàÜÊûêÊ®°Âùó - ÂûÇÁõ¥ÂàÜÂ∏É */}
        <div className="space-y-6">
          {/* ËÆ§Áü•ÁâπÂæÅÂàÜÊûê */}
          {Object.keys(cognitiveProfile).length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üß†
                </div>
                <h3 className="text-xl font-bold text-sky-900">Cognitive Profile</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(cognitiveProfile).map(([key, value]) => (
                  <div key={key} className="bg-sky-50 rounded-lg p-4">
                    <h4 className="font-semibold text-sky-900 mb-2 capitalize">{String(key).replace(/([A-Z])/g, ' $1').trim()}</h4>
                    <p className="text-sky-700 text-sm">{String(value)}</p>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* Â≠¶‰π†ÂÅèÂ•Ω */}
          {Object.keys(learningPreferences).length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üìö
                </div>
                <h3 className="text-xl font-bold text-sky-900">Learning Preferences</h3>
              </div>
              <div className="space-y-4">
                {Object.entries(learningPreferences).map(([key, value]) => (
                  <div key={key} className="flex items-start space-x-4">
                    <div className="w-2 h-2 bg-cyan-500 rounded-full mt-2 flex-shrink-0"></div>
                    <div>
                      <h4 className="font-semibold text-sky-900 mb-1 capitalize">{String(key).replace(/([A-Z])/g, ' $1').trim()}</h4>
                      <p className="text-sky-700 text-sm">{String(value)}</p>
                    </div>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* ÊÉÖÂ¢ÉÊ¥ûÂØü */}
          {Object.keys(contextualInsights).length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üí°
                </div>
                <h3 className="text-xl font-bold text-sky-900">Contextual Insights</h3>
              </div>
              <div className="space-y-4">
                {Object.entries(contextualInsights).map(([key, value]) => (
                  <div key={key} className="bg-sky-50 rounded-lg p-4">
                    <h4 className="font-semibold text-sky-900 mb-2 capitalize">{String(key).replace(/([A-Z])/g, ' $1').trim()}</h4>
                    <p className="text-sky-700 text-sm">{String(value)}</p>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* ÈÄÇÂ∫îÊÄßÁ≠ñÁï• */}
          {Object.keys(adaptiveStrategies).length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üîÑ
                </div>
                <h3 className="text-xl font-bold text-sky-900">Adaptive Strategies</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(adaptiveStrategies).map(([key, value]) => (
                  <div key={key} className="bg-sky-50 rounded-lg p-4">
                    <h4 className="font-semibold text-sky-900 mb-2 capitalize">{String(key).replace(/([A-Z])/g, ' $1').trim()}</h4>
                    <p className="text-sky-700 text-sm">{String(value)}</p>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* Â≠¶‰π†Âª∫ËÆÆ */}
          {recommendations.length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üéØ
                </div>
                <h3 className="text-xl font-bold text-sky-900">Learning Recommendations</h3>
              </div>
              <div className="space-y-3">
                {recommendations.slice(0, 8).map((rec: string, index: number) => (
                  <div key={index} className="flex items-start space-x-3">
                    <div className="w-6 h-6 bg-cyan-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-cyan-600 text-sm font-semibold">{index + 1}</span>
                    </div>
                    <p className="text-sky-700 leading-relaxed">{rec}</p>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* Â≠¶‰π†ÊäÄÂ∑ß */}
          {studyTips.length > 0 && (
            <Card className="p-8 bg-white border border-sky-100">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-sky-500 rounded-xl flex items-center justify-center text-2xl">
                  üí°
                </div>
                <h3 className="text-xl font-bold text-sky-900">Study Tips</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {studyTips.slice(0, 6).map((tip: string, index: number) => (
                  <div key={index} className="bg-sky-50 rounded-lg p-4">
                    <p className="text-sky-700 text-sm leading-relaxed">{tip}</p>
                  </div>
                ))}
              </div>
            </Card>
          )}
        </div>

        {/* Êìç‰ΩúÊåâÈíÆ */}
        <div className="flex justify-center space-x-4">
          <button
            onClick={onReset}
            className="px-8 py-3 rounded-xl font-semibold bg-gradient-to-r from-cyan-600 to-sky-500 text-white hover:shadow-lg hover:scale-105 transition-all duration-200"
          >
            Retake Test
          </button>
          {onShare && (
            <button
              onClick={onShare}
              className="px-8 py-3 rounded-xl font-semibold border-2 border-sky-500 text-sky-600 hover:bg-sky-50 transition-all duration-200"
            >
              Share Results
            </button>
          )}
        </div>
      </div>
      
      <FeedbackFloatingWidget testContext={{ testType: "vark" }} />
    </div>
  );
};