name: Deploy to Cloudflare

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 前端构建和部署
  deploy-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        cd comprehensive-testing-platform/frontend
        pnpm install --frozen-lockfile

    - name: Run tests
      run: |
        cd comprehensive-testing-platform/frontend
        pnpm test:ci

    - name: Build frontend
      run: |
        cd comprehensive-testing-platform/frontend
        pnpm build
      env:
        NODE_ENV: ${{ matrix.environment }}

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: getyourluck-frontend-${{ matrix.environment }}
        directory: comprehensive-testing-platform/frontend/dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # 后端构建和部署
  deploy-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        cd comprehensive-testing-platform/backend
        pnpm install --frozen-lockfile

    - name: Run tests
      run: |
        cd comprehensive-testing-platform/backend
        pnpm test:ci

    - name: Build backend
      run: |
        cd comprehensive-testing-platform/backend
        pnpm build
      env:
        NODE_ENV: ${{ matrix.environment }}

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy
        environment: ${{ matrix.environment }}
        workingDirectory: comprehensive-testing-platform/backend

  # 数据库迁移
  migrate-database:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        cd comprehensive-testing-platform/backend
        pnpm install --frozen-lockfile

    - name: Run database migrations
      run: |
        cd comprehensive-testing-platform/backend
        pnpm wrangler d1 execute getyourluck-${{ matrix.environment }} --file=./scripts/setup-production-db.sql
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level=moderate

    - name: Run SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: |
        cd comprehensive-testing-platform/frontend
        pnpm install --frozen-lockfile

    - name: Run Lighthouse CI
      run: |
        cd comprehensive-testing-platform/frontend
        pnpm install -g @lhci/cli
        lhci autorun

  # 通知部署结果
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, migrate-database, security-scan, performance-test]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          部署状态: ${{ job.status }}
          环境: ${{ github.ref_name }}
          提交: ${{ github.sha }}
          触发者: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
