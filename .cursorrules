# 综合测试平台 AI 助手开发指导规则

## 🎯 项目概述

这是一个基于 Cloudflare 全栈架构的现代化在线测试平台，提供心理测试、占星分析、塔罗占卜等多种测试服务。项目采用模块化架构，严格遵循统一开发标准。

## 🌍 语言要求

**重要说明：** 本项目的所有用户界面、内容展示、API响应等均使用英文作为唯一语言，不提供多语言支持。

- **用户界面**: 所有前端组件、页面标题、按钮文字、提示信息等必须使用英文
- **内容展示**: 测试题目、结果分析、推荐内容、博客文章等必须使用英文
- **API接口**: 所有API响应中的message、error等字段必须使用英文
- **数据库内容**: 存储的测试题目、结果模板、内容配置等必须使用英文
- **错误信息**: 所有错误提示、验证消息等必须使用英文
- **代码注释**: 使用中文

## 🏗️ 技术栈约束

### 前端技术栈
- **框架**: React.js 18+ (函数组件 + Hooks)
- **语言**: TypeScript (严格模式)
- **样式**: Tailwind CSS + 自定义设计系统
- **构建**: Vite
- **状态管理**: Zustand
- **路由**: React Router v6
- **测试**: Vitest + React Testing Library

### 后端技术栈
- **运行环境**: Cloudflare Workers
- **框架**: Hono.js
- **语言**: TypeScript
- **数据库**: Cloudflare D1 (SQLite)
- **缓存**: Cloudflare KV
- **存储**: Cloudflare R2

### 禁止使用的技术
- ❌ 不使用 Next.js、Nuxt.js 等 SSR 框架
- ❌ 不使用 Redux、MobX 等状态管理库
- ❌ 不使用 Material-UI、Ant Design 等 UI 组件库
- ❌ 不使用 Express、Koa 等 Node.js 框架
- ❌ 不使用 i18n 或国际化框架
- ❌ 不实现多语言支持功能

## 📋 开发原则

### 架构一致性
- ✅ 严格遵循现有模块化架构
- ✅ 所有新功能必须集成到现有模块中
- ✅ 不得创建新的架构模式或设计模式
- ✅ 必须使用现有的共享类型和接口
- ✅ 所有内容必须使用英文，无需多语言架构

### 代码质量
- ✅ 所有代码必须有完整的 TypeScript 类型定义
- ✅ 必须实现错误边界和错误处理
- ✅ 必须包含必要的代码注释
- ✅ 必须遵循项目的 ESLint 和 Prettier 配置
- ✅ 所有用户可见的文本必须使用英文
- ✅ 禁止硬编码文本到用户界面
- ✅ 必须在修改代码前，先阅读项目文档，并理解项目需求，详细说明完整的实现逻辑，确认后才开始修改代码
- ✅ 必须在重构代码后，详细检查需要清理的文件和代码
- ✅ 开发方法必须符合最佳实践，并遵循项目文档中的开发规范
- ✅ 出现问题时解决具体问题，不要通过简化、跳过等方式来解决。

### 性能要求
- ✅ 页面首屏加载时间 < 2秒
- ✅ API 响应时间 < 1秒
- ✅ 必须实现组件懒加载
- ✅ 必须优化图片和静态资源

## 🎨 UI/UX 设计原则

### 设计系统
- ✅ 使用预定义的设计令牌 (DESIGN_TOKENS)
- ✅ 遵循模块主题系统 (constellation, psychology, tarot, mbti, career)
- ✅ 使用统一的组件库和样式类

### 响应式设计
- ✅ 移动端优先的设计理念
- ✅ 支持断点: mobile (640px), tablet (768px), desktop (1024px), large (1280px)
- ✅ 使用 Tailwind CSS 响应式类名
- ✅ 确保所有组件在不同屏幕尺寸下正常工作

### 可访问性
- ✅ 符合 WCAG 2.1 AA 级别标准
- ✅ 所有交互元素必须有键盘导航支持
- ✅ 提供适当的 ARIA 标签
- ✅ 支持屏幕阅读器

## 🔧 开发规范

### 组件开发
```typescript
// 必须遵循的组件结构
interface ComponentProps extends BaseComponentProps {
  // 组件特定属性
}

export const Component: React.FC<ComponentProps> = ({ className, testId, ...props }) => {
  return (
    <div className={cn("component-base", className)} data-testid={testId}>
      {/* 组件内容 */}
    </div>
  );
};
```

### 状态管理
```typescript
// 必须使用 Zustand 和统一接口
interface ModuleState extends BaseModuleState {
  // 模块特定状态
}

interface ModuleActions extends BaseModuleActions {
  // 模块特定操作
}

export const useModuleStore = create<ModuleState & ModuleActions>((set, get) => ({
  // 实现
}));
```

### API 开发
```typescript
// 必须使用统一的响应格式
interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
  requestId?: string;
}
```

### 数据库操作
```typescript
// 必须使用统一的数据模型
export class DataModel extends BaseModel {
  constructor(db: D1Database) {
    super(db);
  }
  
  // 实现 CRUD 操作
}
```

## 🚫 禁止行为

### 架构变更
- ❌ 不得修改现有的项目结构
- ❌ 不得创建新的技术栈或框架
- ❌ 不得改变现有的模块划分
- ❌ 不得修改核心接口定义

### 功能扩展
- ❌ 不得添加文档中未明确要求的功能
- ❌ 不得创建新的测试类型（除非在需求文档中）
- ❌ 不得添加新的页面路由（除非在任务清单中）
- ❌ 不得修改现有的业务逻辑

### 数据使用
- ❌ 不得使用虚拟数据或测试数据
- ❌ 不得硬编码任何业务数据
- ❌ 不得使用 Lorem ipsum 等占位文本
- ❌ 不得创建模拟的 API 响应
- ❌ 不得使用中文文本作为用户可见内容
- ❌ 不得实现多语言数据存储或查询

## ✅ 必须遵循的规范

### 文件命名
- 组件文件: PascalCase (如 `QuestionCard.tsx`)
- 工具文件: camelCase (如 `apiClient.ts`)
- 常量文件: UPPER_SNAKE_CASE (如 `API_ENDPOINTS.ts`)
- 类型文件: PascalCase (如 `TestTypes.ts`)

### 目录结构
```
getyourluck/                           # 项目根目录
├── comprehensive-testing-platform/    # 主要项目目录
│   ├── frontend/                     # 前端应用 (React + TypeScript)
│   │   ├── src/
│   │   │   ├── components/           # 组件库
│   │   │   │   ├── ui/              # 通用UI组件
│   │   │   │   └── ...              # 其他组件
│   │   │   ├── modules/             # 功能模块
│   │   │   │   ├── homepage/        # 首页模块
│   │   │   │   ├── psychology/      # 心理测试模块
│   │   │   │   ├── astrology/       # 占星模块
│   │   │   │   ├── tarot/           # 塔罗牌模块
│   │   │   │   ├── mbti/            # MBTI测试模块
│   │   │   │   └── career/          # 职业发展模块
│   │   │   ├── pages/               # 页面组件
│   │   │   ├── stores/              # 状态管理 (Zustand)
│   │   │   ├── services/            # API服务
│   │   │   ├── types/               # TypeScript类型定义
│   │   │   ├── utils/               # 工具函数
│   │   │   └── styles/              # 样式文件
│   │   ├── public/                  # 静态资源
│   │   ├── package.json
│   │   ├── vite.config.ts
│   │   ├── tailwind.config.js
│   │   └── tsconfig.json
│   ├── backend/                      # 后端服务 (Cloudflare Workers)
│   │   ├── src/
│   │   │   ├── routes/              # 路由定义
│   │   │   ├── services/            # 业务逻辑服务
│   │   │   ├── models/              # 数据模型
│   │   │   ├── middleware/          # 中间件
│   │   │   ├── types/               # TypeScript类型
│   │   │   └── index.ts             # 入口文件
│   │   ├── migrations/              # 数据库迁移文件
│   │   ├── seeds/                   # 种子数据
│   │   ├── package.json
│   │   ├── wrangler.toml
│   │   └── tsconfig.json
│   └── shared/                       # 共享代码
│       ├── types/                    # 共享类型定义
│       ├── constants/                # 常量定义
│       └── utils/                    # 共享工具函数
├── .github/                           # GitHub Actions 工作流
├── docs/                              # 项目文档
├── .kiro/                             # 项目规范文档
│   └── specs/                        # 详细规范说明
├── package.json                       # 根目录依赖管理
└── README.md                          # 项目说明文档
```

### 导入导出
```typescript
// 必须使用统一的导出方式
export { Component } from './Component';
export type { ComponentProps } from './types';

// 模块索引文件必须存在
// modules/psychology/index.ts
```

### 英文内容管理
```typescript
// 必须使用英文常量管理所有用户可见的文本
export const UI_TEXT = {
  buttons: {
    submit: "Submit",
    cancel: "Cancel",
    start: "Start Test"
  },
  messages: {
    loading: "Loading...",
    error: "An error occurred",
    success: "Operation completed successfully"
  }
} as const;

// 禁止硬编码中文文本
// ❌ 错误示例: "开始测试"
// ✅ 正确示例: "Start Test"
```

## 🎯 AI 助手行为指导

### 代码生成
- 优先使用现有的组件和工具
- 生成符合项目风格的代码
- 包含完整的类型定义
- 添加必要的错误处理
- **必须使用英文文本**，禁止生成中文用户界面文本
- 使用英文常量管理所有用户可见的文本

### 问题解决
- 首先检查现有代码和文档
- 使用项目已有的解决方案
- 不得引入外部依赖（除非明确要求）
- 优先修复而非重构

### 建议提供
- 基于项目现有架构提供建议
- 考虑性能和可维护性
- 确保建议符合项目规范
- 提供具体的实现方案
- **优先推荐英文内容管理方案**
- 不推荐多语言或国际化相关的解决方案

## 📚 参考文档

在提供帮助前，必须参考以下文档：
- `Docs/basic/` - 基础开发规范

## ⚠️ 重要提醒

1. **严格遵循现有架构** - 不得偏离项目的设计原则
2. **使用现有组件库** - 不得创建新的组件库或设计系统
3. **保持代码一致性** - 所有代码必须符合项目的编码规范
4. **优先现有解决方案** - 不得引入新的技术或方法
5. **文档驱动开发** - 所有功能必须基于需求文档实现
6. **严格使用英文** - 所有用户可见的文本必须使用英文
7. **禁止多语言支持** - 不得实现国际化或多语言功能

---

**注意**: 本文件是 AI 助手的强制性指导原则，任何违反都可能导致代码不符合项目要求。请严格遵循每一项规范！
